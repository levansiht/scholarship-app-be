generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUMS
// ============================================

enum UserRole {
  STUDENT
  ADMIN
  SPONSOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ScholarshipStatus {
  DRAFT
  OPEN
  CLOSED
  SUSPENDED
  EXPIRED
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  AWARDED
  WITHDRAWN
  CANCELLED
}

enum DocumentType {
  TRANSCRIPT
  CERTIFICATE
  RECOMMENDATION_LETTER
  ESSAY
  ID_CARD
  PASSPORT
  CV
  OTHER
}

// USER & AUTHENTICATION
model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  role      UserRole   @default(STUDENT)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  profile              Profile?
  studentProfile       StudentProfile?
  sponsorProfile       SponsorProfile?
  scholarships         Scholarship[]         @relation("ScholarshipCreator")
  applications         Application[]
  reviews              ApplicationReview[]
  savedScholarships    SavedScholarship[]
  applicationDocuments ApplicationDocument[]

  @@index([email])
  @@index([role])
  @@index([status])
  @@map("users")
}

model Profile {
  id          String    @id @default(uuid())
  userId      String    @unique
  firstName   String
  lastName    String
  fullName    String
  phoneNumber String?
  avatar      String?
  dateOfBirth DateTime?
  address     String?
  city        String?
  country     String    @default("Vietnam")
  bio         String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("profiles")
}

model StudentProfile {
  id               String   @id @default(uuid())
  userId           String   @unique
  studentId        String?
  university       String
  major            String
  yearOfStudy      Int
  expectedGradYear Int
  gpa              Decimal  @db.Decimal(3, 2) // 0.00 - 4.00
  skills           String[]
  interests        String[]
  achievements     Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([university])
  @@index([major])
  @@map("student_profiles")
}

model SponsorProfile {
  id               String    @id @default(uuid())
  userId           String    @unique
  organizationName String
  organizationType String // Company, NGO, Government, Individual
  website          String?
  description      String    @db.Text
  logo             String? // URL to logo
  taxId            String? // Tax ID or Business Registration Number
  verified         Boolean   @default(false)
  verifiedAt       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([verified])
  @@map("sponsor_profiles")
}

// SCHOLARSHIP
model Scholarship {
  id             String            @id @default(uuid())
  createdBy      String // User ID of creator (Sponsor or Admin)
  title          String
  slug           String            @unique
  description    String            @db.Text
  amount         Decimal           @db.Decimal(12, 2)
  currency       String            @default("VND")
  numberOfSlots  Int               @default(1)
  availableSlots Int
  deadline       DateTime
  startDate      DateTime          @default(now())
  endDate        DateTime?
  status         ScholarshipStatus @default(DRAFT)
  featured       Boolean           @default(false)
  views          Int               @default(0)
  isRecurring    Boolean           @default(false)
  thumbnailUrl   String?

  tags         String[]
  searchVector String?

  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  creator      User                     @relation("ScholarshipCreator", fields: [createdBy], references: [id])
  categories   ScholarshipCategory[]
  requirements ScholarshipRequirement[]
  eligibility  EligibilityCriteria?
  applications Application[]
  savedBy      SavedScholarship[]
  documents    ScholarshipDocument[]

  @@index([createdBy])
  @@index([status])
  @@index([deadline])
  @@index([slug])
  @@index([featured])
  @@map("scholarships")
}

model ScholarshipCategory {
  id            String   @id @default(uuid())
  scholarshipId String
  name          String
  createdAt     DateTime @default(now())

  scholarship Scholarship @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)

  @@index([scholarshipId])
  @@index([name])
  @@map("scholarship_categories")
}

model ScholarshipRequirement {
  id            String   @id @default(uuid())
  scholarshipId String
  title         String
  description   String   @db.Text
  isRequired    Boolean  @default(true)
  displayOrder  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  scholarship Scholarship @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)

  @@index([scholarshipId])
  @@map("scholarship_requirements")
}

model EligibilityCriteria {
  id            String   @id @default(uuid())
  scholarshipId String   @unique
  minGPA        Decimal? @db.Decimal(3, 2)
  maxGPA        Decimal? @db.Decimal(3, 2)
  allowedMajors String[]
  allowedYears  Int[]
  minAge        Int?
  maxAge        Int?
  nationality   String[]
  otherCriteria Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  scholarship Scholarship @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)

  @@index([scholarshipId])
  @@map("eligibility_criteria")
}

model ScholarshipDocument {
  id            String   @id @default(uuid())
  scholarshipId String
  title         String
  description   String?
  fileUrl       String
  fileSize      Int // in bytes
  mimeType      String
  uploadedAt    DateTime @default(now())

  scholarship Scholarship @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)

  @@index([scholarshipId])
  @@map("scholarship_documents")
}

// APPLICATION
model Application {
  id             String            @id @default(uuid())
  scholarshipId  String
  applicantId    String
  status         ApplicationStatus @default(DRAFT)
  coverLetter    String?           @db.Text
  additionalInfo Json?

  submittedAt DateTime?
  reviewedAt  DateTime?
  decidedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scholarship Scholarship           @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)
  applicant   User                  @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  documents   ApplicationDocument[]
  reviews     ApplicationReview[]
  timeline    ApplicationTimeline[]

  @@unique([scholarshipId, applicantId])
  @@index([applicantId])
  @@index([status])
  @@map("applications")
}

model ApplicationDocument {
  id            String       @id @default(uuid())
  applicationId String
  uploadedBy    String // User ID
  documentType  DocumentType
  title         String
  description   String?
  fileUrl       String
  fileName      String
  fileSize      Int // in bytes
  mimeType      String
  isVerified    Boolean      @default(false)
  verifiedAt    DateTime?
  uploadedAt    DateTime     @default(now())

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  uploader    User        @relation(fields: [uploadedBy], references: [id])

  @@index([applicationId])
  @@index([uploadedBy])
  @@index([documentType])
  @@map("application_documents")
}

model ApplicationReview {
  id            String   @id @default(uuid())
  applicationId String
  reviewerId    String // Admin or Advisor User ID
  rating        Int?
  comments      String   @db.Text
  decision      String? // APPROVED, REJECTED, NEED_MORE_INFO
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  reviewer    User        @relation(fields: [reviewerId], references: [id])

  @@index([applicationId])
  @@index([reviewerId])
  @@map("application_reviews")
}

model ApplicationTimeline {
  id            String   @id @default(uuid())
  applicationId String
  status        String
  description   String?
  createdBy     String?
  createdAt     DateTime @default(now())

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([applicationId])
  @@map("application_timeline")
}

// FEATURES
model SavedScholarship {
  id            String   @id @default(uuid())
  userId        String
  scholarshipId String
  note          String?
  createdAt     DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  scholarship Scholarship @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)

  @@unique([userId, scholarshipId])
  @@index([userId])
  @@index([scholarshipId])
  @@map("saved_scholarships")
}
